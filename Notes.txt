#check a directory exists in a ftp site
		QByteArray url = remoteUrl;
		url += ftpUrl;
		qDebug()<<url;

		curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());
		curl_easy_setopt(curl, CURLOPT_URL, url.data());
		curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);
		res = curl_easy_perform(curl);
		
Note:
The directory path should be like this:
"ftp://129.105.36.214//home/jianshao/2015-02-25"
not 
"ftp://129.105.36.214/home/jianshao/2015-02-25"

#Create Directory int FTP using current date

			QByteArray curl_cmd = "MKD ";
			curl_cmd += ftpUrl;
			qDebug()<<curl_cmd;
//			curl_cmd += m_FTPConfig.path;
//			curl_cmd += "/";
//			curl_cmd += QDateTime::currentDateTime().toString("yyyy-MM-dd");

			headerlist = curl_slist_append(headerlist,curl_cmd.data());

			curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());
			curl_easy_setopt(curl, CURLOPT_URL, remoteUrl.data());
			/* enable verbose for easier tracing */
			curl_easy_setopt(curl, CURLOPT_FTP_CREATE_MISSING_DIRS, 1L);
			curl_easy_setopt(curl, CURLOPT_QUOTE, headerlist);

			res = curl_easy_perform(curl);
	//		/* Check for errors */
			if(res != CURLE_OK)
			{
				emit TransformSignal(QString("curl_easy_perform() failed: %1\n").arg(curl_easy_strerror(res)));
			}
			else
			{
				emit TransformSignal(QString("Completed create directory %1").arg(curl_cmd.data()));
			}

			qDebug()<<res;

			curl_slist_free_all (headerlist);
			headerlist = NULL;
			
#backup

//						post_cmd = "RNFR ";
//						post_cmd += "./";
//						post_cmd += item_list[4];
//						headerlist = curl_slist_append(headerlist,post_cmd.data());

//						post_cmd += "RNTO";
//						post_cmd += " ./";
//						post_cmd += nowDate;
//						post_cmd += "/";
//						post_cmd += item_list[4];
//						headerlist = curl_slist_append(headerlist,post_cmd.data());


//						qDebug()<<qDir.path()+"/"+item_list[3];

	/* Check for errors */
	if(res != CURLE_OK)
	{
		emit TransformSignal(QString("curl_easy_perform() failed: %1\n").arg(curl_easy_strerror(res)));
	}
	else
	{
		emit TransformSignal(QString("Completed uploading File %1").arg(item_list[3].data()));
	}

	//workable code for uploading to a directory in the FTP
	
						qFile.setFileName(qDir.path()+"/"+item_list[3]);
						qFile.open(QIODevice::ReadOnly);
						QByteArray url = remoteUrl;
						if(!url.endsWith("/"))url.append("/");
						url.append(ftpUrl);
						url.append("/");
						url += item_list[3];
						/* specify target */
						curl_easy_setopt(curl,CURLOPT_URL, url.data());

//						curl_easy_setopt(curl,CURLOPT_POSTQUOTE,headerlist);

						qDebug()<<url;
						/* now specify which file to upload */
						curl_easy_setopt(curl, CURLOPT_READDATA, &qFile);
//						qDebug()<<up.data();
						curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());

						/* Set the size of the file to upload (optional).  If you give a *_LARGE
							 option you MUST make sure that the type of the passed-in argument is a
							 curl_off_t. If you use CURLOPT_INFILESIZE (without _LARGE) you must
							 make sure that to pass in a type 'long' argument. */
//						qDebug()<<qFile.size();
						curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE,(curl_off_t)qFile.size());
						/* Now run off and do what you've been told! */
						res = curl_easy_perform(curl);
						/* Check for errors */
						if(res != CURLE_OK)
						{
							emit TransformSignal(QString("curl_easy_perform() failed: %1\n").arg(curl_easy_strerror(res)));
						}
						else
						{
							emit TransformSignal(QString("Completed uploading File %1").arg(item_list[3].data()));
						}

						curl_slist_free_all (headerlist);
						headerlist = NULL;

						qFile.close();
						
						
//workable code: upload file to default diretory
				if(curl)
					{
						qFile.setFileName(qDir.path()+"/"+item_list[4]);

						post_cmd = "RNFR ";
						post_cmd += "./";
						post_cmd += item_list[4];
						headerlist = curl_slist_append(headerlist,post_cmd.data());

						post_cmd += "RNTO";
						post_cmd += " ./";
						post_cmd += nowDate;
						post_cmd += "/";
						post_cmd += item_list[4];
						headerlist = curl_slist_append(headerlist,post_cmd.data());



						qFile.open(QIODevice::ReadOnly);
						QByteArray url = remoteUrl;
						url += item_list[4];
						/* specify target */
						curl_easy_setopt(curl,CURLOPT_URL, url.data());
						curl_easy_setopt(curl,CURLOPT_POSTQUOTE,headerlist);
						/* now specify which file to upload */
						curl_easy_setopt(curl, CURLOPT_READDATA, &qFile);
						curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());

						/* Set the size of the file to upload (optional).  If you give a *_LARGE
							 option you MUST make sure that the type of the passed-in argument is a
							 curl_off_t. If you use CURLOPT_INFILESIZE (without _LARGE) you must
							 make sure that to pass in a type 'long' argument. */
						curl_easy_setopt(curl, CURLOPT_INFILESIZE_LARGE,(curl_off_t)qFile.size());
						/* Now run off and do what you've been told! */
						res = curl_easy_perform(curl);
						/* Check for errors */
						if(res != CURLE_OK)
						{
							emit TransformSignal(QString("curl_easy_perform() failed: %1\n").arg(curl_easy_strerror(res)));
						}
						else
						{
							emit TransformSignal(QString("Completed uploading File %1").arg(item_list[4].data()));
						}

						curl_slist_free_all (headerlist);
						headerlist = NULL;
//						if(headerlist!=NULL)
//						{
//							curl_slist_free_all (headerlist);
//							curl_easy_setopt(curl,CURLOPT_QUOTE,NULL);
//							headerlist = NULL;
//						}

						qFile.close();
					}
					
//check directory exists workable code

	QByteArray ftpUrl;
	ftpUrl += m_FTPConfig.path;
	if(!ftpUrl.endsWith("/"))ftpUrl+="/";
	ftpUrl += nowDate;
	
	if(curl)
	{
		//check url exists

		QByteArray url = remoteUrl;
		url += ftpUrl;
		qDebug()<<url;

		curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());
		curl_easy_setopt(curl, CURLOPT_URL, url.data());
		curl_easy_setopt(curl, CURLOPT_NOBODY, 1L);
		res = curl_easy_perform(curl);

		qDebug()<<"Exist:"<<res;

		if(res != CURLE_OK)
		{

			QByteArray curl_cmd = "MKD ";
			curl_cmd += ftpUrl;
			qDebug()<<curl_cmd;
			//			curl_cmd += m_FTPConfig.path;
			//			curl_cmd += "/";
			//			curl_cmd += QDateTime::currentDateTime().toString("yyyy-MM-dd");

			headerlist = curl_slist_append(headerlist,curl_cmd.data());

			curl_easy_setopt(curl, CURLOPT_USERPWD, up.data());
			curl_easy_setopt(curl, CURLOPT_URL, remoteUrl.data());
			/* enable verbose for easier tracing */
			curl_easy_setopt(curl, CURLOPT_FTP_CREATE_MISSING_DIRS, 1L);
			curl_easy_setopt(curl, CURLOPT_QUOTE, headerlist);

			res = curl_easy_perform(curl);
			//		/* Check for errors */
			if(res != CURLE_OK)
			{
				emit TransformSignal(QString("curl_easy_perform() failed: %1\n").arg(curl_easy_strerror(res)));
			}
			else
			{
				emit TransformSignal(QString("Completed create directory %1").arg(curl_cmd.data()));
			}

			qDebug()<<res;

			curl_slist_free_all (headerlist);
			headerlist = NULL;
		}

		/* we want to use our own read function */
		curl_easy_setopt(curl, CURLOPT_READFUNCTION, CurlHeper::read_callback);

		/* enable uploading */
		curl_easy_setopt(curl, CURLOPT_UPLOAD, 1L);

		curl_easy_setopt(curl, CURLOPT_FTP_CREATE_MISSING_DIRS, 1L);
	}
	
qxtlog can repeatedly use log file engine
	//	QxtBasicFileLoggerEngine *anotherDbg = dynamic_cast<QxtBasicFileLoggerEngine*>(qxtLog->engine("dbg"));
//	QxtBasicFileLoggerEngine *anotherApp = dynamic_cast<QxtBasicFileLoggerEngine*>(qxtLog->engine("app"));



//	anotherDbg->setLogFileName("AnotherDbg.log");
//	anotherApp->setLogFileName("AnotherInfo.log");

//	qxtLog->debug("Changed to anotherDbg.log");
//	qxtLog->info("Changed to anotherinfo.log");

//backup
void MainWorker::OnError(QProcess::ProcessError error)
{
	// QProcess::FailedToStart 0 The process failed to start. Either the invoked program is missing, or you may have insufficient permissions to invoke the program.
	// QProcess::Crashed 1 The process crashed some time after starting successfully.
	// QProcess::Timedout 2 The last waitFor...() function timed out. The state of QProcess is unchanged, and you can try calling waitFor...() again.
	// QProcess::WriteError 4 An error occurred when attempting to write to the process. For example, the process may not be running, or it may have closed its input channel.
	// QProcess::ReadError 3 An error occurred when attempting to read from the process. For example, the process may not be running.
	// QProcess::UnknownError 5 An unknown error occurred. This is the default return value of error().
	QString errMsg = "No Error";
	switch(error)
	{
	case QProcess::Crashed:
		errMsg = "Error: Crashed";
		break;
	case QProcess::FailedToStart:
		errMsg = "Error: Failed to Start";
		break;
	case QProcess::ReadError:
		errMsg = "Error: Read Error";
		break;
	case QProcess::WriteError:
		errMsg = "Error: Write Error";
		break;
	default:
		errMsg = "Error: Unknown Error";
		break;
	}
	emit TransformSignal(errMsg);
}

void MainWorker::OnFinished(int exitCode, QProcess::ExitStatus exitStatus)
{
	if(exitStatus==QProcess::NormalExit)
	{
		// QString msg =
		emit TransformSignal(QString("Transform is completed:%1").arg(exitCode));
		m_ok = true;
	}
	else
	{
		emit TransformSignal(QString("Transform is failed:"));
	}
}
void MainWorker::OnStarted()
{
	emit TransformSignal(QString("Transform is started"));
}



//MySQL Database operation
bool FTPWorker::InitDB()
{
	QSqlDatabase db = QSqlDatabase::addDatabase("QMYSQL");
	db.setHostName(m_db_cfg.host);
	db.setDatabaseName(m_db_cfg.db);
	db.setUserName(m_db_cfg.user);
	db.setPassword(m_db_cfg.pwd);

	if(!db.open())
	{
		qDebug()<<db.lastError();
		return false;
	}

	QStringList tables = db.tables();
	if (!tables.contains(m_db_cfg.tbl, Qt::CaseInsensitive))
	{
		qDebug()<<"Table "<<m_db_cfg.tbl<<" is not exist";
		return false;
	}



	return true;
}

bool FTPWorker::InsertRecord(const QList<QByteArray> &items, bool color, bool depth)
{
	QSqlQuery q;

	QString queryCmd = "insert into " + m_db_cfg.tbl;
	queryCmd += "(Start, End, FileName, DirName, Type) ";
	queryCmd += "values (?, ?, ?, ?, ?)";


	if(color)
	{
		if(!q.prepare(queryCmd))
		{
			qDebug()<<q.lastError();
			return false;
		}

		q.addBindValue(items[0]);
		q.addBindValue(items[1]);
		q.addBindValue(items[3]);
		q.addBindValue(m_ftp_cfg.path);
		q.addBindValue("Color");
		q.exec();

		qDebug()<<"Insert color record into id:"<<q.lastInsertId();

	}


	if(depth)
	{
		if(!q.prepare(queryCmd))
		{
			qDebug()<<q.lastError();
			return false;
		}

		q.addBindValue(items[0]);
		q.addBindValue(items[1]);
		q.addBindValue(items[4]);
		q.addBindValue(m_ftp_cfg.path);
		q.addBindValue("Depth");
		q.exec();

		qDebug()<<"Insert depth record into id:"<<q.lastInsertId();

	}

	return true;
}

//if(qryPrepared)
//{
//						query.bindValue(":start", item_list[0]);
//						query.bindValue(":end", item_list[1]);
//						query.bindValue(":filename", item_list[2]);
//						query.bindValue(":dirname", m_ftp_cfg.path);
//						query.bindValue(":type",item_list[4]);
//						if(query.exec())
//						{
//							qDebug()<<"INFO: Inserted "+item_list[2]+" into database";
//						}
//						else
//						{
//							qDebug()<<"ERROR: Failed to insert "+item_list[2]+" into database";
//						}
//}